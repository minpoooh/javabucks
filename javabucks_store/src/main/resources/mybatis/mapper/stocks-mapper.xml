<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper 
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">  

<mapper namespace="mybatis.mapper.stocks-mapper">

	<!-- s: 재고 현황 조회 --> 
	<select id="bevStocksList" parameterType="java.util.Map" resultType="StoreStocksDTO">
		select * 
		from ( select rownum rn, C.*
				from ( select A.*, B.stockCateCode, B.stockListName, B.stockListPrice, B.stockListImage, B.stockListStatus
					   from javabucks_storeStocks A
		 			   join javabucks_stockList B
					   on A.stockListCode = B.stockListCode
					   where stockCateCode = 'BEV'
					   		and bucksId = #{bucksId}
					   order by A.stockListCode asc) C)
		where rn between #{startRow} and #{endRow}		
	</select>
	
	<select id="fooStocksList" resultType="StoreStocksDTO">
		select * 
		from ( select rownum rn, C.*
				from ( select A.*, B.stockCateCode, B.stockListName, B.stockListPrice, B.stockListImage, B.stockListStatus
					   from javabucks_storeStocks A
		 			   join javabucks_stockList B
					   on A.stockListCode = B.stockListCode
					   where stockCateCode = 'CAK' or stockCateCode = 'SAN'
					   		and bucksId = #{bucksId}
					   order by A.stockListCode asc) C)
		where rn between #{startRow} and #{endRow}		
	</select>
	
	<select id="cupStocksList" resultType="StoreStocksDTO">
		select * 
		from ( select rownum rn, C.*
				from ( select A.*, B.stockCateCode, B.stockListName, B.stockListPrice, B.stockListImage, B.stockListStatus
					   from javabucks_storeStocks A
		 			   join javabucks_stockList B
					   on A.stockListCode = B.stockListCode
					   where stockCateCode = 'CUP'
					   		and bucksId = #{bucksId}
					   order by A.stockListCode asc) C)
		where rn between #{startRow} and #{endRow}		
	</select>
	
	<select id="syrStocksList" resultType="StoreStocksDTO">
		select * 
		from ( select rownum rn, C.*
				from ( select A.*, B.stockCateCode, B.stockListName, B.stockListPrice, B.stockListImage, B.stockListStatus
					   from javabucks_storeStocks A
		 			   join javabucks_stockList B
					   on A.stockListCode = B.stockListCode
					   where stockCateCode = 'SYR'
					   		and bucksId = #{bucksId}
					   order by A.stockListCode asc) C)
		where rn between #{startRow} and #{endRow}		
	</select>
	
	<select id="whiStocksList" resultType="StoreStocksDTO">
		select * 
		from ( select rownum rn, C.*
				from ( select A.*, B.stockCateCode, B.stockListName, B.stockListPrice, B.stockListImage, B.stockListStatus
					   from javabucks_storeStocks A
		 			   join javabucks_stockList B
					   on A.stockListCode = B.stockListCode
					   where stockCateCode = 'WHI'
					   		and bucksId = #{bucksId}
					   order by A.stockListCode asc) C)
		where rn between #{startRow} and #{endRow}		
	</select>
	
	<select id="milStocksList" resultType="StoreStocksDTO">
		select * 
		from ( select rownum rn, C.*
				from ( select A.*, B.stockCateCode, B.stockListName, B.stockListPrice, B.stockListImage, B.stockListStatus
					   from javabucks_storeStocks A
		 			   join javabucks_stockList B
					   on A.stockListCode = B.stockListCode
					   where stockCateCode = 'MIL'
					   		and bucksId = #{bucksId}
					   order by A.stockListCode asc) C)
		where rn between #{startRow} and #{endRow}		
	</select>
	
	<select id="tumStocksList" resultType="StoreStocksDTO">
		select * 
		from ( select rownum rn, C.*
				from ( select A.*, B.stockCateCode, B.stockListName, B.stockListPrice, B.stockListImage, B.stockListStatus
					   from javabucks_storeStocks A
		 			   join javabucks_stockList B
					   on A.stockListCode = B.stockListCode
					   where stockCateCode = 'TUM'
					   		and bucksId = #{bucksId}
					   order by A.stockListCode asc) C)
		where rn between #{startRow} and #{endRow}		
	</select>
	
	<select id="wonStocksList" resultType="StoreStocksDTO">
		select * 
		from ( select rownum rn, C.*
				from ( select A.*, B.stockCateCode, B.stockListName, B.stockListPrice, B.stockListImage, B.stockListStatus
					   from javabucks_storeStocks A
		 			   join javabucks_stockList B
					   on A.stockListCode = B.stockListCode
					   where stockCateCode = 'WON'
					   		and bucksId = #{bucksId}
					   order by A.stockListCode asc) C)
		where rn between #{startRow} and #{endRow}		
	</select>
	<!-- s: 재고 현황 조회 -->	
	
	<!-- s: 재고 리스트 개수 -->
	<select id="bevCount" resultType="int">
		select count(*) 
		from (select A.*, B.stockCateCode, B.stockListName, B.stockListPrice, B.stockListImage
				from javabucks_storeStocks A
				join javabucks_stockList B
				on A.stockListCode = B.stockListCode
				where stockCateCode = 'BEV'
					and bucksId = #{bucksId}
		)
	</select>
	
	<select id="fooCount" resultType="int">
		select count(*) 
		from (select A.*, B.stockCateCode, B.stockListName, B.stockListPrice, B.stockListImage
				from javabucks_storeStocks A
				join javabucks_stockList B
				on A.stockListCode = B.stockListCode
				where stockCateCode = 'CAK' or stockCateCode = 'SAN'
					and bucksId = #{bucksId}
		)	
	</select>
	
	<select id="cupCount" resultType="int">
		select count(*) 
		from (select A.*, B.stockCateCode, B.stockListName, B.stockListPrice, B.stockListImage
				from javabucks_storeStocks A
				join javabucks_stockList B
				on A.stockListCode = B.stockListCode
				where stockCateCode = 'CUP'
					and bucksId = #{bucksId}
		)	
	</select>
	
	<select id="syrCount" resultType="int">
		select count(*) 
		from (select A.*, B.stockCateCode, B.stockListName, B.stockListPrice, B.stockListImage
				from javabucks_storeStocks A
				join javabucks_stockList B
				on A.stockListCode = B.stockListCode
				where stockCateCode = 'SYR'
					and bucksId = #{bucksId}
		)	
	</select>
	
	
	<select id="whiCount" resultType="int">
		select count(*) 
		from (select A.*, B.stockCateCode, B.stockListName, B.stockListPrice, B.stockListImage
				from javabucks_storeStocks A
				join javabucks_stockList B
				on A.stockListCode = B.stockListCode
				where stockCateCode = 'WHI'
					and bucksId = #{bucksId}
		)	
	</select>
	
	
	<select id="milCount" resultType="int">
		select count(*) 
		from (select A.*, B.stockCateCode, B.stockListName, B.stockListPrice, B.stockListImage
				from javabucks_storeStocks A
				join javabucks_stockList B
				on A.stockListCode = B.stockListCode
				where stockCateCode = 'MIL'
					and bucksId = #{bucksId}
		)	
	</select>
	
	<select id="tumCount" resultType="int">
		select count(*) 
		from (select A.*, B.stockCateCode, B.stockListName, B.stockListPrice, B.stockListImage
				from javabucks_storeStocks A
				join javabucks_stockList B
				on A.stockListCode = B.stockListCode
				where stockCateCode = 'TUM'
					and bucksId = #{bucksId}
		)	
	</select>
	
	<select id="wonCount" resultType="int">
		select count(*) 
		from (select A.*, B.stockCateCode, B.stockListName, B.stockListPrice, B.stockListImage
				from javabucks_storeStocks A
				join javabucks_stockList B
				on A.stockListCode = B.stockListCode
				where stockCateCode = 'WON'
					and bucksId = #{bucksId}
		)	
	</select>
	<!-- e: 재고 리스트 개수 -->

	<!-- s: 재고 장바구니 추가 -->
	<insert id="addStocksCart" parameterType="java.util.Map">
		insert into javabucks_stockCart 
   		(stockCartNum, bucksId, stockListCode, stockCartCount, stockCartRegDate) 
    	values 
    	(seq_stockCartNum.NEXTVAL, #{bucksId}, #{stockListCode}, #{quantity}, SYSDATE)
	</insert>	
	<!-- e: 재고 장바구니 추가 -->
	
	<!-- s: 장바구니 재고 수량 추가 -->
	<update id="updateCartQuantity" parameterType="java.util.Map">
		update javabucks_stockCart
		set stockCartCount = stockCartCount + #{quantity}
		where stockListCode = #{stockListCode}
				and bucksId = #{bucksId}
	</update>	
	<!-- e: 장바구니 재고 수량 추가 -->		
	
	<!-- s: 재고 장바구니 조회 -->
	<select id="stockCartList" parameterType="String" resultType="StockCartDTO">
		select A.stockCartNum, A.stockListCode, A.stockCartCount, A.stockCartRegDate, B.stockCateCode, B.stockListName, B.stockListPrice, B.stockListImage, B.stockListStatus
		from javabucks_stockCart A
		join javabucks_stockList B
		on A.stockListCode = B.stockListCode
	    where bucksId = #{bucksId} 
	    		and A.stockCartStatus = '주문대기'
		order by stockCartRegDate desc
	</select>	
	<!-- e: 재고 장바구니 조회 -->
	
	<!-- s: 장바구니 재고 수량 변경 -->
	<update id="updateQuantity" parameterType="java.util.Map">
		update javabucks_stockCart
		set stockCartCount = #{quantity}
		where stockListCode = #{stockListCode}
			  and bucksId = #{bucksId}
	</update>	
	<!-- e: 장바구니 재고 수량 변경 -->	
	
	<!-- s: 장바구니 삭제 -->
	<delete id="deleteCart" parameterType="java.util.Map">
		delete from javabucks_stockCart
		where bucksId = #{bucksId} 
			  and stockListCode = #{stockListCode}
	</delete>
	<!-- e: 장바구니 삭제 -->
	
	<!-- s: 장바구니 주문 -->
	<!-- 발주 인서트 -->
	<insert id="addStoreOrder" parameterType="java.util.Map">
		insert into javabucks_baljoo
				(baljooNum, bucksId, baljooList, baljooPrice, baljooDate, baljooStatus) 
		values(
				seq_baljooNum.NEXTVAL, #{bucksId}, #{baljooList}, #{baljooPrice}, SYSDATE, '주문완료')
	</insert>
	
	<!-- 장바구니 상태 업데이트 -->
	<update id="updateCartStatus" parameterType="java.util.Map">
		update javabucks_stockCart
		set stockCartStatus = '주문완료'
		where bucksId = #{bucksId} 
			  and stockCartNum = #{stockCartNum}
	</update>
	<!-- e: 장바구니 주문 -->

</mapper>