<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
  <mapper namespace="mybatis.mapper.sales-mapper">
  
  	<select id="checkBucksId" parameterType="String" resultType="int">
        SELECT COUNT(*)
        FROM javabucks_bucks 
        WHERE bucksId = #{bucksId}
    </select>

   <!-- 이메일 중복 확인 쿼리 -->
    <select id="checkEmail" parameterType="BucksDTO" resultType="int">
        SELECT COUNT(*) FROM javabucks_bucks WHERE bucksEmail1 = #{bucksEmail1} AND bucksEmail2 = #{bucksEmail2}
    </select>
   
   <!-- 지점 등록 -->
     <insert id="addBucks" parameterType="BucksDTO" >
     	INSERT INTO javabucks_bucks (
            bucksId, bucksPasswd, bucksOwner, bucksName, bucksLocation, bucksEmail1, 
            bucksEmail2, bucksTel1, bucksTel2, bucksTel3, 
            bucksJoindate, bucksStart, bucksEnd, bucksEnable, orderEnable ) VALUES (
            #{bucksId},
            #{bucksPasswd},
            #{bucksOwner},
            #{bucksName},
            #{bucksLocation},
            #{bucksEmail1},
            #{bucksEmail2},
            #{bucksTel1},
            #{bucksTel2},
            #{bucksTel3},
            SYSDATE,
            TO_DATE(TO_CHAR(SYSDATE, 'YYYY-MM-DD') || ' ' || #{bucksStart, jdbcType=VARCHAR}, 'YYYY-MM-DD HH24:MI:SS'),
    TO_DATE(TO_CHAR(SYSDATE, 'YYYY-MM-DD') || ' ' || #{bucksEnd, jdbcType=VARCHAR}, 'YYYY-MM-DD HH24:MI:SS'),
            DEFAULT,
            DEFAULT
        )
     </insert>
     
     <!--  지점 리스트  -->
	<select id="bucksList" parameterType="map" resultType="BucksDTO">
	<![CDATA[ 
	SELECT * FROM 
	( SELECT ROWNUM AS rnum, R.* FROM ( SELECT * FROM javabucks_bucks ORDER BY bucksJoindate DESC, bucksName ASC ) R 
	WHERE ROWNUM <= #{endIndex} ) WHERE rnum >= #{startIndex} ]]>
	<!--  select * from javabucks_bucks   -->
	</select>
			
		
     
     <!-- 특정 검색에 해당하는 지점 리스트 -->
     <select id="searchBucks" parameterType="map" resultType="BucksDTO">
    SELECT * FROM (
    SELECT ROWNUM rnum, a.*
    FROM (
        SELECT *
        FROM javabucks_bucks
        WHERE 
            (#{bucksName} IS NULL OR bucksName LIKE '%' || #{bucksName} || '%')
            AND (#{bucksId} IS NULL OR bucksId LIKE '%' || #{bucksId} || '%')
            AND (
                (#{startDate} IS NULL AND #{endDate} IS NULL) 
                OR (bucksJoindate BETWEEN #{startDate} AND #{endDate})
            )
        ORDER BY bucksJoindate DESC, bucksName ASC
    ) a
        WHERE ROWNUM &lt;= #{endIndex}
    )
    WHERE rnum &gt;= #{startIndex}
</select>
    
    <!--  검색 페이징처리 갯수 -->
		<select id="searchBucksCount" parameterType="map" resultType="int"> 
			SELECT COUNT(*) AS TOTAL_COUNT FROM javabucks_bucks 
			WHERE (#{bucksName} IS NULL OR bucksName LIKE '%' || #{bucksName} || '%') 
			AND (#{bucksId} IS NULL OR bucksId LIKE '%' || #{bucksId} || '%') 
			AND ( (#{startDate} IS NOT NULL AND #{endDate} IS NOT NULL AND bucksJoindate BETWEEN #{startDate} 
			AND #{endDate}) OR (#{startDate} IS NULL AND #{endDate} IS NULL) ) </select>
			
		<select id="editbucks" parameterType="String" resultType="BucksDTO"> 
		Select * FROM javabucks_bucks WHERE bucksId = #{bucksId} </select>
			
		<!--  수정 이메일 중복 확인 쿼리  -->
		<select id="editCheckEmail" parameterType="BucksDTO" resultType="int"> 
			SELECT COUNT(*) FROM javabucks_bucks WHERE bucksEmail1 = #{bucksEmail1} AND bucksEmail2 = #{bucksEmail2} AND bucksId != #{bucksId} </select>
			
		<!--  지점 수정   -->
		<update id="editBucks" parameterType="BucksDTO"> 
		UPDATE javabucks_bucks SET bucksName = #{bucksName}, bucksOwner = #{bucksOwner}, bucksTel1 = #{bucksTel1}, 
		bucksTel2 = #{bucksTel2}, bucksTel3 = #{bucksTel3}, bucksEmail1 = #{bucksEmail1}, bucksEmail2 = #{bucksEmail2},
		bucksStart = TO_DATE(#{bucksStart}, 'HH24:MI'), 
        bucksEnd = TO_DATE(#{bucksEnd}, 'HH24:MI')
		WHERE bucksId = #{bucksId} </update>
			
		<!--  지점 탈퇴  -->
		<update id="deleteBucks" parameterType="String">
	    UPDATE javabucks_bucks
	    SET bucksEnable = 'N'
	    WHERE bucksId = #{bucksId}
	</update>
		
		
		
			
		<!--  페이징처리  -->
		<select id="bucksListCount" parameterType="int" resultType="int"> 
		SELECT COUNT(*) AS TOTAL_COUNT FROM javabucks_bucks </select>
			    
    
 <!-- Sales -->
 		<!-- 벅스이름 select
 		<select id="selectBucksName" resultType="BucksDTO">
 		 	select bucksName,bucksId from javabucks_bucks ORDER BY bucksName ASC
 		
 		</select> -->
 		
 		<select id="selectBaljoo" resultType="BaljooDTO">
			SELECT
        b.bucksId AS bucksId,
        b.bucksName AS bucksName,
        TO_CHAR(jb.baljooDate, 'YYYY-MM') AS baljooMonth,
        COALESCE(SUM(jb.baljooPrice), 0) AS totalOrderAmount
    FROM
        javabucks_bucks b
    LEFT JOIN
        javabucks_baljoo jb ON b.bucksId = jb.bucksId
        AND TO_CHAR(jb.baljooDate, 'MM') = TO_CHAR(SYSDATE, 'MM')
        AND TO_CHAR(jb.baljooDate, 'YYYY') = TO_CHAR(SYSDATE, 'YYYY')
        AND jb.baljooStatus = '접수완료'
    GROUP BY
        b.bucksId,
        b.bucksName,
        TO_CHAR(jb.baljooDate, 'YYYY-MM')
    ORDER BY 
        bucksName ASC
 		</select>
 		
		
		<!-- 발주 겸색 리스트 수정본2 -->
		<select id="selectOrderSum" parameterType="map" resultType="BaljooDTO">
		    SELECT 
		        jbu.bucksId,
		        jbu.bucksName,
		        jbu.bucksLocation,
		        TO_CHAR(jb.baljooDate, 'YYYY-MM') AS baljooMonth,
		        COALESCE(SUM(jb.baljooPrice), 0) AS totalOrderAmount  -- 발주 금액이 없을 때 0으로 처리
		    FROM 
		        javabucks_bucks jbu
		    LEFT JOIN 
		        javabucks_baljoo jb
		    ON 
		        jbu.bucksId = jb.bucksId 
		        AND TO_CHAR(jb.baljooDate, 'YYYY-MM') = #{baljooDate}
		        AND jb.baljooStatus = '접수완료'
		    WHERE 
		        (#{bucksName} IS NULL OR #{bucksName} = '' OR jbu.bucksName LIKE '%' || #{bucksName} || '%')
		    GROUP BY 
		        jbu.bucksId,
		        jbu.bucksName,
		        jbu.bucksLocation,
		        TO_CHAR(jb.baljooDate, 'YYYY-MM')
		    ORDER BY 
		        jbu.bucksName ASC, jbu.bucksId, baljooMonth
		</select>
 		
 		
 		
 		<!-- 발주 상세 - 리스트 합치기 -->
 		<select id="selectDetails" parameterType="map" resultType="BaljooDTO">
        SELECT 
	        jb.*
	    FROM 
	        javabucks_baljoo jb  -- 발주 테이블
	    WHERE 
	        jb.bucksId = #{bucksId}  -- 특정 발주 테이블 ID에 해당하는 레코드를 선택
	        AND TO_CHAR(jb.baljooDate, 'YYYY-MM') = #{baljooDate}
	        AND jb.baljooStatus = '접수완료'
	    </select>
	    
	    
	     <select id="getlistName" resultType="java.lang.Object" parameterType="String">
    SELECT stockListName, stockListPrice
    FROM javabucks_stockList
    WHERE stockListCode = #{stockCode}
</select>
    
    

		<select id="monthlyBucksSales" resultType="PayhistoryDTO">
			SELECT 
				b.bucksId AS bucksId,
		        b.bucksName AS branchName,   
		        NVL(SUM(p.payhistoryPrice), 0) AS totalSales,
        		TO_CHAR(SYSDATE, 'YYYY-MM') AS payhistoryYearMonth
		    FROM 
		        javabucks_bucks b
		    LEFT JOIN 
		        javabucks_payhistory p
		    ON 
		        p.bucksId = b.bucksId 
		        AND TO_CHAR(p.payhistoryDate, 'YYYY') = TO_CHAR(SYSDATE, 'YYYY')
		        AND TO_CHAR(p.payhistoryDate, 'MM') = TO_CHAR(SYSDATE, 'MM')
		    GROUP BY 
		    	b.bucksId,
		        b.bucksName,
		        TO_CHAR(SYSDATE, 'YYYY-MM')
		    ORDER BY 
		    	b.bucksName ASC,
		    	b.bucksId,
		        TO_CHAR(SYSDATE, 'YYYY-MM')
		</select>
		
		<!-- 월별 정산 겸색  -->
		<select id="searchMonth" parameterType="map" resultType="PayhistoryDTO">
         SELECT 
			    jbu.bucksId AS bucksId,
			    jbu.bucksName AS branchName, 
			    jbu.bucksLocation,
			    #{monthDate} AS payhistoryYearMonth,  -- 검색한 monthDate를 직접 반환
			    COALESCE(SUM(jph.payhistoryPrice), 0) AS totalSales
			FROM 
			    javabucks_bucks jbu
			LEFT JOIN 
			    javabucks_payhistory jph 
			ON 
			    jbu.bucksId = jph.bucksId 
			AND 
			    TO_CHAR(jph.payhistoryDate, 'YYYY-MM') = #{monthDate}
			WHERE 
			    (#{bucksName} IS NULL OR #{bucksName} = '' OR jbu.bucksName LIKE '%' || #{bucksName} || '%')
			GROUP BY 
			    jbu.bucksId,
			    jbu.bucksName,
			    jbu.bucksLocation
			ORDER BY 
			    jbu.bucksName ASC, jbu.bucksId
    </select>
    
    <!-- 월별 매출 상세보기 1단계 -조인 : 월별 ordercode에대해 orderlist뽑기-->
    <select id="monthlyDetails" parameterType="map" resultType="OrderDTO">
	    	SELECT o.* , p.cpnlistnum
			FROM javabucks_payhistory p
			JOIN javabucks_order o ON p.orderCode = o.orderCode
			WHERE p.bucksId = #{bucksId}
			  AND TO_CHAR(p.payhistoryDate, 'YYYY-MM') = #{payhistoryDate}
    </select>
    
    <!--   -->
    <select id="getMenuPrice" parameterType="String" resultType="int">
    	SELECT jm.menuPrice FROM JAVABUCKS_MENU jm WHERE jm.MENUCODE =#{menuCode}
	</select>
	
	
	<select id="getOptPrice" parameterType="String" resultType="int">
	    SELECT
        NVL(i.icePrice, 0) + 
        NVL(w.whipPrice, 0) + 
        NVL(m.milkPrice, 0) + 
        NVL(c.cupPrice, 0) + 
        NVL(s.shotPrice * o.optShotCount, 0) +  -- shotNum의 가격과 optShotCount를 곱한 값
        NVL(sr.syrupPrice * o.optSyrupCount, 0) AS optionPrice
    FROM
        javabucks_order_opt o
    LEFT JOIN javabucks_menuopt_ice i ON o.iceNum = i.iceNum
    LEFT JOIN javabucks_menuopt_whip w ON o.whipNum = w.whipNum
    LEFT JOIN javabucks_menuopt_milk m ON o.milkNum = m.milkNum
    LEFT JOIN javabucks_menuopt_cup c ON o.cupNum = c.cupNum
    LEFT JOIN javabucks_menuopt_shot s ON o.shotNum = s.shotNum
    LEFT JOIN javabucks_menuopt_syrup sr ON o.syrupNum = sr.syrupNum
    WHERE
        o.optId = #{optionId}
	</select>
	
	<select id="getCouponPrice" parameterType="int" resultType="int">
		SELECT c.cpnPrice
	    FROM javabucks_couponList cl
	    JOIN javabucks_coupon c ON cl.cpnCode = c.cpnCode
	    WHERE cl.cpnListNum = #{coupon}
	</select>
	
	<!--  daily Sales  -->
		<select id="dailyBucksSales" parameterType="map" resultType="PayhistoryDTO"> SELECT * FROM ( SELECT TO_CHAR(p.payhistoryDate, 'YYYY-MM-DD') AS payhistoryDate, p.payhistoryPrice AS payhistoryPrice, p.bucksId, p.cpnListNum, o.orderCode AS orderCode, o.orderList AS orderList, b.bucksName AS branchName, b.bucksOwner, DENSE_RANK() OVER (ORDER BY TO_CHAR(p.payhistoryDate, 'YYYY-MM-DD') DESC, b.bucksId) AS rn FROM javabucks_payhistory p JOIN javabucks_order o ON p.orderCode = o.orderCode JOIN javabucks_bucks b ON p.bucksId = b.bucksId WHERE TRUNC(p.payhistoryDate) = TRUNC(SYSDATE) ) WHERE rn BETWEEN #{startRow} AND #{endRow} </select>
		
		<select id="dailyBucksSalesPrice" resultType="int"> 
		    SELECT 
		        SUM(p.payhistoryPrice) AS totalSales
		    FROM 
		        javabucks_payhistory p 
		    JOIN 
		        javabucks_order o ON p.orderCode = o.orderCode 
		    JOIN 
		        javabucks_bucks b ON p.bucksId = b.bucksId 
		    WHERE 
		        TRUNC(p.payhistoryDate) = TRUNC(SYSDATE)
		   
		    
		</select>
		
		
<select id="searchDailySales" parameterType="map" resultType="PayhistoryDTO"> SELECT * FROM ( SELECT TO_CHAR(p.payhistoryDate, 'YYYY-MM-DD') AS payhistoryDate, p.payhistoryPrice AS payhistoryPrice, p.bucksId, p.cpnListNum, o.orderCode AS orderCode, o.orderList AS orderList, b.bucksName AS branchName, b.bucksOwner, DENSE_RANK() OVER (ORDER BY TO_CHAR(p.payhistoryDate, 'YYYY-MM-DD') DESC, b.bucksId) AS rn FROM javabucks_payhistory p JOIN javabucks_order o ON p.orderCode = o.orderCode JOIN javabucks_bucks b ON p.bucksId = b.bucksId WHERE (TO_CHAR(p.payhistoryDate, 'YYYY-MM-DD') BETWEEN COALESCE(#{startDate}, '1900-01-01') AND COALESCE(#{endDate}, TO_CHAR(SYSDATE, 'YYYY-MM-DD'))) AND b.bucksName LIKE '%' || #{bucksName} || '%' ) WHERE rn BETWEEN #{startRow} AND #{endRow} </select>
<select id="dailySalesCount" parameterType="int" resultType="int"> SELECT COUNT(DISTINCT TO_CHAR(p.payhistoryDate, 'YYYY-MM-DD') || '-' || p.bucksId) AS totalCount FROM javabucks_payhistory p JOIN javabucks_order o ON p.orderCode = o.orderCode JOIN javabucks_bucks b ON p.bucksId = b.bucksId WHERE TRUNC(p.payhistoryDate) = TRUNC(SYSDATE) </select>
<select id="searchDSalesCount" parameterType="map" resultType="int"> SELECT COUNT(DISTINCT TO_CHAR(p.payhistoryDate, 'YYYY-MM-DD') || '-' || p.bucksId) AS totalCount FROM javabucks_payhistory p JOIN javabucks_order o ON p.orderCode = o.orderCode JOIN javabucks_bucks b ON p.bucksId = b.bucksId WHERE (TO_CHAR(p.payhistoryDate, 'YYYY-MM-DD') BETWEEN COALESCE(#{startDate}, '1900-01-01') AND COALESCE(#{endDate}, TO_CHAR(SYSDATE, 'YYYY-MM-DD'))) AND b.bucksName LIKE '%' || #{bucksName} || '%' </select>
		
  </mapper>